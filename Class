const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const dayjs = require('dayjs');
const utc = require('dayjs/plugin/utc');
const timezone = require('dayjs/plugin/timezone');
dayjs.extend(utc);
dayjs.extend(timezone);

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤/‡∏Ñ‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏á/‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô ‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏™‡∏ï‡πå)
const timetable = {
  '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå': [
    { start: '07:30', end: '08:30', subject: 'Home Room' },
    { start: '08:30', end: '09:20', subject: '‡∏Ñ31101' },
    { start: '09:20', end: '10:10', subject: '‡∏ó31101' },
    { start: '10:10', end: '11:00', subject: '‡∏ß30201' },
    { start: '11:00', end: '11:50', subject: '‡∏ß30201' },
    { start: '11:50', end: '12:40', subject: '‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' },
    { start: '12:40', end: '13:30', subject: '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°' },
    { start: '13:30', end: '14:20', subject: '‡∏≠31101' },
    { start: '14:20', end: '15:10', subject: '‡∏™31101' },
    { start: '15:10', end: '16:00', subject: '‡∏Ñ‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏á' },
  ],
  '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£': [
    { start: '07:30', end: '08:30', subject: 'Home Room' },
    { start: '08:30', end: '09:20', subject: '‡∏Ñ31201' },
    { start: '09:20', end: '10:10', subject: '‡∏Ñ31201' },
    { start: '10:10', end: '11:00', subject: '‡∏ß30294' },
    { start: '11:00', end: '11:50', subject: '‡∏ß30294' },
    { start: '11:50', end: '12:40', subject: '‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' },
    { start: '12:40', end: '13:30', subject: '‡∏≠31201' },
    { start: '13:30', end: '14:20', subject: '‡∏á31101' },
    { start: '14:20', end: '15:10', subject: '‡∏ß30241' },
    { start: '15:10', end: '16:00', subject: '‡∏ß30241' },
  ],
  '‡∏û‡∏∏‡∏ò': [
    { start: '07:30', end: '08:30', subject: 'Home Room' },
    { start: '08:30', end: '09:20', subject: '‡∏ß31105' },
    { start: '09:20', end: '10:10', subject: '‡∏ß30221' },
    { start: '10:10', end: '11:00', subject: '‡∏ß31283' },
    { start: '11:00', end: '11:50', subject: '‡∏ß31283' },
    { start: '11:50', end: '12:40', subject: '‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' },
    { start: '12:40', end: '13:30', subject: '‡∏≠31201' },
    { start: '13:30', end: '14:20', subject: '‡∏ó31101' },
    { start: '14:20', end: '15:10', subject: '‡∏Ñ31101' },
    { start: '15:10', end: '16:00', subject: '‡∏Ñ‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏á' },
  ],
  '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ': [
    { start: '07:30', end: '08:30', subject: 'Home Room' },
    { start: '08:30', end: '09:20', subject: '‡∏≠31201' },
    { start: '09:20', end: '10:10', subject: '‡∏ß30241' },
    { start: '10:10', end: '11:00', subject: '‡∏Ñ30201' },
    { start: '11:00', end: '11:50', subject: '‡∏Ñ30201' },
    { start: '11:50', end: '12:40', subject: '‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' },
    { start: '12:40', end: '13:30', subject: '‡∏ß30221' },
    { start: '13:30', end: '14:20', subject: '‡∏ß30201' },
    { start: '14:20', end: '15:10', subject: '‡∏ß30201' },
    { start: '15:10', end: '16:00', subject: '‡∏ß30201' },
  ],
  '‡∏®‡∏∏‡∏Å‡∏£‡πå': [
    { start: '07:30', end: '08:30', subject: 'Home Room' },
    { start: '08:30', end: '09:20', subject: '‡∏™31101' },
    { start: '09:20', end: '10:10', subject: '‡∏™31102' },
    { start: '10:10', end: '11:00', subject: '‡∏Å31901' },
    { start: '11:00', end: '11:50', subject: '‡∏û31101' },
    { start: '11:50', end: '12:40', subject: '‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' },
    { start: '12:40', end: '13:30', subject: '‡∏Ñ‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏á' },
    { start: '13:30', end: '14:20', subject: '‡∏®31101' },
    { start: '14:20', end: '15:10', subject: '‡∏Ñ‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏á' },
    { start: '15:10', end: '16:00', subject: '‡∏ä‡∏∏‡∏°‡∏ô‡∏∏‡∏°' },
  ]
};

const daysTH = ['‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå', '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡πÄ‡∏™‡∏≤‡∏£‡πå'];

function getCurrentAndNextPeriod() {
  const now = dayjs().tz('Asia/Bangkok');
  const day = daysTH[now.day()];
  if (!timetable[day]) {
    return { current: { subject: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' }, next: { subject: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' }, day, time: now.format('HH:mm') };
  }
  const periods = timetable[day];
  let current = { subject: '‡∏û‡∏±‡∏Å' };
  let next = { subject: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' };
  for (let i = 0; i < periods.length; i++) {
    const { start, end } = periods[i];
    const startTime = dayjs.tz(now.format('YYYY-MM-DD') + ' ' + start, 'YYYY-MM-DD HH:mm', 'Asia/Bangkok');
    const endTime = dayjs.tz(now.format('YYYY-MM-DD') + ' ' + end, 'YYYY-MM-DD HH:mm', 'Asia/Bangkok');
    if (now.isAfter(startTime) && now.isBefore(endTime)) {
      current = periods[i];
      next = periods[i+1] || { subject: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' };
      break;
    }
    if (now.isBefore(startTime)) {
      current = { subject: '‡∏û‡∏±‡∏Å' };
      next = periods[i];
      break;
    }
  }
  // ‡∏´‡∏•‡∏±‡∏á 16:00
  if (now.isAfter(dayjs.tz(now.format('YYYY-MM-DD') + ' 16:00', 'YYYY-MM-DD HH:mm', 'Asia/Bangkok'))) {
    current = { subject: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' };
    next = { subject: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' };
  }
  return { current, next, day, time: now.format('HH:mm') };
}

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

let interval = null;
let lastMessage = null;

client.on('messageCreate', async message => {
  if (message.content === '!class') {
    if (interval) clearInterval(interval);
    const sendOrEdit = async () => {
      const { current, next, day, time } = getCurrentAndNextPeriod();
      const embed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('üìö ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ')
        .setDescription(`**‡∏ß‡∏±‡∏ô:** ${day}\n**‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ:** ${time}`)
        .addFields(
          { name: '‡∏Ñ‡∏≤‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', value: `**${current.subject}**`, inline: true },
          { name: '‡∏Ñ‡∏≤‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', value: `**${next.subject}**`, inline: true },
        )
        .setFooter({ text: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)' })
        .setTimestamp();

      if (lastMessage) {
        await lastMessage.edit({ embeds: [embed] });
      } else {
        lastMessage = await message.reply({ embeds: [embed] });
      }
    };

    await sendOrEdit();
    interval = setInterval(sendOrEdit, 30000);
  }
});

client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}`);
});

// client.login('YOUR_BOT_TOKEN');
